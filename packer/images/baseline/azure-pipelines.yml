# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - baseline-image

variables:
- group: Packer

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: CI
  displayName: Continuous Integration
  steps:
  - task: AzureResourceManagerTemplateDeployment@3
    inputs:
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: 'Visual Studio Enterprise Subscription'
      subscriptionId: 'c843b536-4aa0-45fc-868d-2a0913602b18'
      action: 'Create Or Update Resource Group'
      resourceGroupName: '$(IMAGE_RESOURCE_GROUP)'
      location: '$(LOCATION)'
      templateLocation: 'Linked artifact'
      csmFile: 'images/baseline/azureDeploy.json'
      overrideParameters: '-galleryName $(GALLERY_NAME) -location $(LOCATION) -imageDefinitionName $(IMAGE_NAME)'
      deploymentMode: 'Incremental'
  - task: Bash@3
    displayName: Install Inspec to CI Machine
    inputs:
      targetType: 'inline'
      script: |
        curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec
  - task: PackerBuild@1
    displayName: Build Image in Azure
    continueOnError: true
    inputs:
      templateType: 'custom'
      customTemplateLocation: 'images/baseline/packer.json'
      customTemplateParameters: |
        {
            "client_id": "$(CLIENT_ID)",
            "client_secret": "$(CLIENT_SECRET)",
            "tenant_id": "$(TENANT_ID)",
            "subscription_id": "$(SUBSCRIPTION_ID)",
            "image_resource_group": "$(IMAGE_RESOURCE_GROUP)",
            "image_name": "$(IMAGE_NAME)",
            "image_version": "$(IMAGE_VERSION)",
            "temp_resource_group_name": "$(TEMP_RESOURCE_GROUP_NAME)",
            "location": "$(LOCATION)"
        }
  - task: PublishTestResults@2
    displayName: Publish Test Results to Azure DevOps
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/junit.xml'
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'